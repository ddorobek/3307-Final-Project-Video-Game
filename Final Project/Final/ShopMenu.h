/** @class ShopMenu.h
* @brief This is the header file for the ShopMenu class.
* @author Group15
* This header file declares the attributes and functions of the ShopMenu class.
*/
#pragma once
#include <iostream>
#include "SFML/Graphics.hpp"
#include "SFML/Window.hpp"
#include "SFML/System.hpp"
#include <vector>
#include "Player.h"

/** @class ShopMenu.h
* @brief Declaration of attributes and functions of ShopMenu.cpp
* This is the declaration of the attributes and functions of the ShopMenu class
*/
class ShopMenu {
public:
	/** @fn ShopMenu(Player &player1);
	* @brief This function constructs the ShopMenu object.
	*
	* This function constructs the ShopMenu object and renders a window to display to the user. The user has the option to purchase health, weapons, or leave the shop.
	*/
	ShopMenu(Player &player1);

	/** @fn void purchaseHealth (Player &player1, Text &currency, Text &health, Text &insFunds, Text &gunPurchasedText)
	* @brief This function determines whether the player has enough currency to purchase health and updates player's health if they do.
	* @param player1 - address of player object to update gun.
	* @param currency - address of currency text to update player's currency
	* @param health - address of health text to update player's health
	* @param insFunds - address of 'insufficient funds' text to display to the user if they do not have enough currency to purchase health.
	* @param gunPurchasedText - address of 'gun purchased' text to display to the user if they successfully purchase a weapon.
	* This function determines whether the player has enough currency to purchase health. If they do, player's health is incremented.
	* If the player does not have enough currency, an 'insufficient funds' message will be displayed on the screen.
	* If the player's health is already at max capacity, a 'player has max health' message will be displayed on the screen.
	*/
	void purchaseHealth (Player &player1, Text &currency, Text &health, Text &insFunds, Text &gunPurchasedText);

	/** @fn void purchaseGuns(Player &player1, const char* gunString, Text &currency, Text &insFunds, Text &gunPurchasedText)
	* @brief This function determines whether the player has enough currency to purchase a gun and updates player's gun if they do.
	* @param player1 - address of player object to update gun.
	* @param gunString - string of gun image available to purchase.
	* @param currency - address of currency text to update player's currency
	* @param insFunds - address of 'insufficient funds' text to display to the user if they do not have enough currency to purchase gun.
	* @param gunPurchasedText - address of 'gun purchased' text to display to the user if they successfully purchase a weapon.
	* This function determines whether the player has enough currency to purchase a gun. If they do, player's gun is updated.
	* Otherwise, an 'insufficient funds' message will be displayed on the screen.
	*/
	void purchaseGuns(Player &player1, const char* gunString, Text &currency, Text &insFunds, Text &gunPurchasedText);

	/** @fn bool isClosed()
	* @brief This function returns true if the player has clicked "Leave Shop".
	* This function returns true if the player has clicked on "Leave SHop". Otherwise, function returns false.
	*/
	bool isClosed(); 

	/** @fn const char* generateRandom()
	* @brief This function generates a random string for the image of one of five guns for the player to purchase from the shop.
	* @return string for image of random generated gun.
	* This function generates the string for the image of one of five random guns for the player to purchase from the shop. 
	* With this string, the window can load the button image for the randomly generated gun.
	*/
	const char* generateRandom();

	/** @fn const char* getGunName(const char* gunFile)
	* @brief This function generates and returns a string for the name of the gun that was passed in the gunFile parameter. 
	* @param gunFile - string for image file generated by generateRandom().
	* @return string for name of gun corresponding to gunFile.
	* This function generates the string for the image of one of five random guns for the player to purchase from the shop.
	* With this string, the window can load the button image for the randomly generated gun.
	*/
	const char* getGunName(const char* gunFile);

	/** @fn int getGunCost(const char* gunFile)
	* @brief This function generates and returns an int for the cost of the gun that was passed in the gunFile parameter.
	* @param gunFile - string for image file generated by generateRandom().
	* @return int for cost of gun corresponding to gunFile.
	* This function generates the int for the cost of one of five random guns for the player to purchase from the shop.
	* With this int, the guns are priced correctly when being displayed in the shop.
	*/
	int getGunCost(const char* gunFile);

private:
	bool closed = false; /**< determines if main menu has been closed or not */
};
